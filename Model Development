<!DOCTYPE html>
<html>
<head>
    <title>4. Model Development</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 20px;
            color: #333;
        }
        h1 {
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 5px;
        }
        .code {
            background-color: #f4f4f4;
            padding: 15px;
            border-left: 4px solid #3498db;
            overflow-x: auto;
            font-family: monospace;
            margin: 15px 0;
            border-radius: 0 4px 4px 0;
        }
        .output {
            background-color: #e8f4f8;
            padding: 15px;
            border-left: 4px solid #1abc9c;
            margin: 15px 0;
            border-radius: 0 4px 4px 0;
        }
        .diagram {
            text-align: center;
            margin: 25px 0;
            padding: 15px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        img {
            max-width: 100%;
            height: auto;
            border: 1px solid #eee;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>

<h1>4. Model Development</h1>

<div class="code">
# Initialize models
models = {
    "Logistic Regression": LogisticRegression(max_iter=1000, random_state=42),
    "Decision Tree": DecisionTreeClassifier(max_depth=5, random_state=42),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42)
}

# Training function
def train_model(model, X_train, y_train):
    pipeline = Pipeline([
        ('scaler', StandardScaler()),
        ('model', model)
    ])
    pipeline.fit(X_train, y_train)
    return pipeline
</div>

<div class="code">
# Train all models
trained_models = {}
for name, model in models.items():
    trained_models[name] = train_model(model, X_train, y_train)
    print(f"{name} trained successfully")
</div>

<div class="output">
Logistic Regression trained successfully<br>
Decision Tree trained successfully<br>
Random Forest trained successfully
</div>

<div class="diagram">
    <img src="https://www.researchgate.net/publication/336402347/figure/fig5/AS:812472659349505@1570719981056/Model-training-process.png" 
         alt="Model Training Process"
         style="max-height: 400px;">
    <p>Figure 5: Model training workflow diagram showing the pipeline process</p>
</div>

<div class="code">
# Evaluation function
def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    y_proba = model.predict_proba(X_test)[:, 1]
    
    return {
        'Accuracy': accuracy_score(y_test, y_pred),
        'Precision': precision_score(y_test, y_pred),
        'Recall': recall_score(y_test, y_pred),
        'F1 Score': f1_score(y_test, y_pred),
        'ROC AUC': roc_auc_score(y_test, y_proba)
    }

# Evaluate all models
results = {}
for name, model in trained_models.items():
    results[name] = evaluate_model(model, X_test, y_test)

# Convert to DataFrame
results_df = pd.DataFrame(results).T
results_df
</div>

<div class="output">
<table>
    <thead>
        <tr>
            <th>Model</th>
            <th>Accuracy</th>
            <th>Precision</th>
            <th>Recall</th>
            <th>F1 Score</th>
            <th>ROC AUC</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Logistic Regression</td>
            <td>0.9649</td>
            <td>0.9744</td>
            <td>0.9744</td>
            <td>0.9744</td>
            <td>0.9940</td>
        </tr>
        <tr>
            <td>Decision Tree</td>
            <td>0.9298</td>
            <td>0.9512</td>
            <td>0.9512</td>
            <td>0.9512</td>
            <td>0.9219</td>
        </tr>
        <tr>
            <td>Random Forest</td>
            <td>0.9649</td>
            <td>0.9744</td>
            <td>0.9744</td>
            <td>0.9744</td>
            <td>0.9932</td>
        </tr>
    </tbody>
</table>
</div>

<div class="code">
# Final model selection
best_model = results_df[results_df['Accuracy'] == results_df['Accuracy'].max()].index[0]
print(f"\nSelected best model: {best_model}")
print(f"With accuracy: {results_df.loc[best_model, 'Accuracy']:.4f}")
</div>

<div class="output">
Selected best model: Logistic Regression<br>
With accuracy: 0.9649
</div>

</body>
</html>
